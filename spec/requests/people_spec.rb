require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/people", type: :request do
  classSetup user: :admin_user

  # This should return the minimal set of attributes required to create a valid
  # Person. As you add validations to Person, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:person).to_params
  }

  let(:invalid_attributes) {
    build(:person).to_params ssn: "9208211"  # bad param
  }

  describe "GET /index" do
    it "renders a successful response" do
      p = Person.create! valid_attributes
      get people_url
      expect(response).to be_successful
      p.destroy
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      person = Person.create! valid_attributes
      get person_url(person)
      expect(response).to be_successful
      person.destroy
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_person_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      person = Person.create! valid_attributes
      get edit_person_url(person)
      expect(response).to be_successful
      person.destroy
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Person" do
        expect {
          post people_url, params: { person: valid_attributes }
        }.to change(Person, :count).by(1)
      end

      it "redirects to the created person" do
        post people_url, params: { person: valid_attributes }
        expect(response).to redirect_to(person_url(Person.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Person" do
        expect {
          post people_url, params: { person: invalid_attributes }
        }.to change(Person, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post people_url, params: { person: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {"first_name"=>"XUbi",
         "last_name"=>"XDubi",
        }
      }

      it "updates the requested person" do
        person = Person.create! valid_attributes
        patch person_url(person), params: { person: new_attributes }
        person.reload
        expect(person.first_name).to eq "XUbi"
        expect(person.last_name).to eq "XDubi"
      end

      it "redirects to the person" do
        person = Person.create! valid_attributes
        patch person_url(person), params: { person: new_attributes }
        person.reload
        expect(response).to redirect_to(person_url(person))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        person = Person.create! valid_attributes
        patch person_url(person), params: { person: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested person" do
      person = Person.create! valid_attributes
      expect {
        delete person_url(person)
      }.to change(Person, :count).by(-1)
    end

    it "redirects to the people list" do
      person = Person.create! valid_attributes
      delete person_url(person)
      expect(response).to redirect_to(people_url)
    end
  end

  #describe "GET /index" do
  #  pending "add some examples (or delete) #{__FILE__}"
  #end
  describe "POST /create" do
    it 'unnested attributes' do
      params = {
        #"authenticity_token"=>"[FILTERED]",
        "person"=>{"first_name"=>"aa",
                   "last_name"=>"PostUA",
                   "date_of_birth"=>"2025-05-02",
                   "ssn"=>"920-82-1111",
                   "age"=>"33"
                  }
      }
      expect {
        post people_path, params: params
      }.to change{Person.count}.by(1)

      expect(response).to redirect_to(assigns(:person))

      p = Person.where(last_name: params["person"]["last_name"]).first
      expect(p.phone_numbers.size).to eq 0
    end

    it 'nested attributes' do
      params = {
        "person"=>{"first_name"=>"aa",
                   "last_name"=>"PostNA",
                   "date_of_birth"=>"2025-05-02",
                   "ssn"=>"920-82-1111",
                   "age"=>"33",
                   "phone_numbers_attributes"=>{
                     "0"=>{"number"=>"(850)603-9985",
                           "primary"=>"1",
                           "active"=>"0"}}}}
      #pn = PhoneNumber.new(params["person"]["phone_numbers_attributes"]["0"])
      #puts pn.errors.inspect
      #expect(pn.valid?).to eq true

      expect {
        post "/people", params: params
      }.to change{Person.count}.by(1)
      expect(response).to redirect_to(assigns(:person))
      p = Person.where(last_name: params["person"]["last_name"]).first
      expect(p.phone_numbers.size).to eq 1
    end
  end
end
