require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  requestSetup object: :create_user,
               objects: [:create_user_sample,
                         :create_user_sample],
               user: :admin_user

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # TODO: password updating is not working through reequest tests
    # build(:user_sample).
    #  to_params password: "password",
    #            password_confirmation: "password"
    build(:user_sample).to_params
  }

  let(:invalid_attributes) {
    build(:user_sample).
      to_params password: "password",
                password_confirmation: "notpassword"
  }

  let(:new_attributes) {
    { email: "x#{rand(1000)}@foo.com",
      # TODO: password updating is not working through reequest tests
      #password: "newpassword",
      #password_confirmation: "newpassword"
    }
  }

  # covers basic testing of standard routes
  requests_get_index
  requests_get_show
  requests_get_new
  requests_get_edit
  requests_post_create
  requests_patch_update
  requests_delete_destroy

  describe "GET /profile" do
    before :all do
      sign_in Access.user
    end
    it "renders a successful response no person" do
      get profile_user_url(Access.user)
      expect(response).to be_successful
    end
    it "renders a successful response with person" do
      student_user = create(:student_user)
      get profile_user_url(student_user)
      expect(response).to be_successful
    ensure
      student_user.destroy
    end
  end

  describe "GET /edit_profile" do
    before :all do
      sign_in Access.user
    end
    it "renders a successful response no person" do
      # current user should be an admin
      get edit_profile_user_url(Access.user)
      expect(response).to be_successful
    end
    it "renders a successful response with person" do
      student_user = create(:student_user)
      get edit_profile_user_url(student_user)
      expect(response).to be_successful
    ensure
      student_user.destroy
    end
  end
end
