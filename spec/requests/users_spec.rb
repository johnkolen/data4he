require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  classSetup user: :admin_user

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:user_sample).
      to_params password: "password",
                password_confirmation: "password"
  }

  let(:invalid_attributes) {
    build(:user_sample).
      to_params password: "password",
                password_confirmation: "notpassword"
  }

  before(:all) do
    @user = create(:user_sample)
    @student_user = create(:student_user)
    @user_patch = create(:user_sample)
  end

  after(:all) do
    @user.destroy
    @user_patch.destroy
  end

  describe "GET /index" do
    it "renders a successful response" do
      get users_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get user_url(@user)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_user_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post users_url, params: { user: valid_attributes }
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(user_url(User.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post users_url, params: { user: invalid_attributes }
        }.to change(User, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { email: "x#{rand(1000)}@foo.com",
          password: "newpassword",
          password_confirmation: "newpassword" }
      }
      before(:each) do
        @p = @user_patch.to_params
      end
      after(:each) do
        @user_patch.update!(@p) # return user_patch back
      end
      it "updates the requested user" do
        patch user_url(@user_patch), params: { user: new_attributes }
        @user_patch.reload
        expect(@user_patch.email).to eq new_attributes[:email]
      end

      it "redirects to the user" do
        patch user_url(@user_patch), params: { user: new_attributes }
        @user_patch.reload
        expect(response).to redirect_to(user_url(@user_patch))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch user_url(@user_patch), params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    before :each do
      @user_delete = create(:user_sample)
    end
    after :each do
      @user_delete.destroy
    end

    it "destroys the requested user" do
      expect {
        delete user_url(@user_delete)
      }.to change(User, :count).by(-1)
      expect(response).to redirect_to(users_url)
    end

    it "redirects to the users list" do
      delete user_url(@user_delete)
      expect(response).to redirect_to(users_url)
    end
  end

  describe "GET /profile" do
    it "renders a successful response" do
      get profile_user_url(@user)
      expect(response).to be_successful
    end
  end

  describe "GET /edit_profile" do
    it "renders a successful response no person" do
      get edit_profile_user_url(@user)
      expect(response).to be_successful
    end
    it "renders a successful response with person" do
      get edit_profile_user_url(@student_user)
      expect(response).to be_successful
    end
  end
end
